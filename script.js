document.addEventListener('DOMContentLoaded', () => {
    // --- Get Elements ---
    const chatForm = document.getElementById('chat-form');
    const messageInput = document.getElementById('message-input');
    const chatMessages = document.getElementById('chat-messages');
    const chatWindow = document.getElementById('chat-window');
    const newChatButton = document.getElementById('new-chat-button');

    // --- State Management ---
    let lang = (new URLSearchParams(window.location.search).get('lang') || 'EN').toUpperCase();
    let chatHistory = [];
    // --- DYNAMIC KEYS ARE NOW GENERATED BY FUNCTIONS ---
    const getHistoryKey = () => `chat_session_${lang}`;
    const getViewedLinksKey = () => `viewed_links_${lang}`;

    // --- Core Functions ---
    const addMessage = (text, className) => {
        const messageText = (typeof text === 'string') ? text : "Sorry, I encountered an error. Please try again.";
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${className}`;
        messageDiv.innerHTML = text.replace(/\n/g, '<br>');

        const navButtons = messageDiv.querySelectorAll('.chatbot-nav-link');
        if (navButtons.length > 0) {
            const viewedLinks = JSON.parse(sessionStorage.getItem(getViewedLinksKey()) || '{}');
            navButtons.forEach(button => {
                const projectKey = button.dataset.project || `section_${button.dataset.sectionKey}`;
                if (viewedLinks[projectKey]) {
                    button.textContent = (lang === 'HU') ? 'Megtekintve' : 'Viewed';
                    button.disabled = true;
                }
            });
        }
        
        chatMessages.appendChild(messageDiv);
        chatWindow.scrollTop = chatWindow.scrollHeight;
        return messageDiv;
    };

    const handleUserQuery = async (queryText) => {
        // 1. Check if this is the first interaction by looking for the starter buttons.
        const startersContainer = chatMessages.querySelector('.conversation-starters-container');
        if (startersContainer) {
            // If it is, wipe the entire welcome screen for a clean slate.
            chatMessages.innerHTML = '';
            // And reset the history to start the official conversation.
            chatHistory = [];
        }
        addMessage(queryText, 'user-message');
        chatHistory.push({ role: 'user', content: queryText });
        saveHistory();
        const loadingIndicator = addMessage('<span></span><span></span><span></span>', 'bot-message loading');
        const historyToSend = chatHistory.slice(-6);
        try {
            const response = await fetch('/api/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ query: queryText, lang: lang, history: historyToSend }),
            });
            loadingIndicator.remove();
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || `Server responded with status: ${response.status}`);
            }
            const data = await response.json();
            addMessage(data.response, 'bot-message');
            chatHistory.push({ role: 'assistant', content: data.response });
            saveHistory();
        } catch (error) {
            loadingIndicator.remove();
            console.error("Chatbot Error:", error);
            addMessage(`Error: ${error.message}`, 'bot-message error');
        }
    };
    
    // --- History Management Functions ---
    const saveHistory = () => {
        sessionStorage.setItem(getHistoryKey(), JSON.stringify(chatHistory));
    };

    const loadHistory = () => {
        const storedHistory = sessionStorage.getItem(getHistoryKey());
        chatMessages.innerHTML = ''; // Always clear first
        if (storedHistory && storedHistory.length > 2) {
            chatHistory = JSON.parse(storedHistory);
            chatHistory.forEach(turn => addMessage(turn.content, turn.role === 'user' ? 'user-message' : 'bot-message'));
        } else {
            displayConversationStarters();
        }
    };

    const clearHistoryAndDisplayStarters = () => {
        chatHistory = [];
        sessionStorage.removeItem(getHistoryKey());
        sessionStorage.removeItem(getViewedLinksKey());
        chatMessages.innerHTML = '';
        displayConversationStarters();
    };

    const displayConversationStarters = () => {
        const langKey = lang.toUpperCase();
        const welcomeText = chatbotTranslations[langKey].welcome;
        const starters = chatbotTranslations[langKey].starters;
        addMessage(welcomeText, 'bot-message');
        const container = document.createElement('div');
        container.className = 'conversation-starters-container';
        starters.forEach(question => {
            const button = document.createElement('button');
            button.className = 'starter-button';
            button.textContent = question;
            container.appendChild(button);
        });
        chatMessages.appendChild(container);
    };

    // --- DEDICATED FUNCTION TO HANDLE LANGUAGE CHANGE ---
    const handleLanguageChange = (newLang) => {
        if (!newLang || (newLang !== 'EN' && newLang !== 'HU') || newLang === lang) {
            return; // Exit if language is invalid or the same
        }
        // 1. Update the global language state FIRST.
        lang = newLang;
        // 2. Update all UI text elements to the new language.
        updateChatbotUI();
        // 3. Load history for the NEW language.
        loadHistory();
    };

    // --- Event Listeners ---
    chatForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const userMessage = messageInput.value.trim();
        if (!userMessage) return;
        messageInput.value = '';
        handleUserQuery(userMessage);
    });

    if (newChatButton) {
        newChatButton.addEventListener('click', () => {
            clearHistoryAndDisplayStarters();
        });
    }

    // --- UI Translation and Language Switching ---
    const chatbotTranslations = {
        EN: {
            title: "Chat with Accaderi", placeholder: "Ask a question...", send: "Send", newChat: "New Chat",
            welcome: "Hello! How can I help you today? Here are a few suggestions:",
            starters: [ "What are your main services?", "Tell me about your projects in the Middle East.", "What AI tools can you build?", "How do I get in touch?" ]
        },
        HU: {
            title: "Csevegés az Accaderivel", placeholder: "Kérdezzen valamit...", send: "Küldés", newChat: "Új Chat",
            welcome: "Üdvözlöm! Miben segíthetek ma? Íme néhány javaslat:",
            starters: [ "Melyek a fő szolgáltatásaik?", "Meséljen a közel-keleti projektekről!", "Milyen MI eszközöket készítenek?", "Hogyan léphetek kapcsolatba Önökkel?" ]
        }
    };

    const updateChatbotUI = () => {
        const upperLang = lang.toUpperCase();
        const translations = chatbotTranslations[upperLang] || chatbotTranslations.EN;
        const chatContainer = document.getElementById('chat-container');
        if (chatContainer) {
            const titleElement = chatContainer.querySelector('#header-title');
            const inputElement = chatContainer.querySelector('#message-input');
            const buttonElement = chatContainer.querySelector('button[type="submit"]');
            const newChatBtn = chatContainer.querySelector('#new-chat-button');
            if (titleElement) titleElement.textContent = translations.title;
             if (inputElement) {
                inputElement.placeholder = translations.placeholder;
                inputElement.title = (upperLang === 'HU') 
                    ? "Kérjük, írja be a kérdését ide." 
                    : "Please enter your question here.";
            }
            if (buttonElement) buttonElement.textContent = translations.send;
            if (newChatBtn) {
                newChatBtn.textContent = translations.newChat;
                newChatBtn.title = (upperLang === 'HU') ? "Új beszélgetés indítása" : "Start a new conversation";
            }
        }
    };

    window.addEventListener('message', (event) => {
        if (event.data && event.data.type === 'SET_LANGUAGE') {
            const newLang = event.data.lang.toUpperCase();
            handleLanguageChange(newLang);
        }
    });

    chatMessages.addEventListener('click', function(e) {
        if (e.target && e.target.classList.contains('chatbot-nav-link')) {
            const button = e.target;
            const viewedLinks = JSON.parse(sessionStorage.getItem(getViewedLinksKey()) || '{}');
            const projectKey = button.dataset.project || `section_${button.dataset.sectionKey}`;
            viewedLinks[projectKey] = true;
            sessionStorage.setItem(getViewedLinksKey(), JSON.stringify(viewedLinks));
            const navData = { type: 'CHATBOT_NAVIGATE', sectionKey: button.dataset.sectionKey, sectionId: button.dataset.sectionId, category: button.dataset.category, project: button.dataset.project, };
            window.parent.postMessage(navData, '*');
            button.textContent = (lang === 'HU') ? 'Megtekintve' : 'Viewed';
            button.disabled = true;
        }
        if (e.target && e.target.classList.contains('starter-button')) {
            const question = e.target.textContent;
            handleUserQuery(question);
        }
    });

    // --- Initial Setup ---
    updateChatbotUI();
    loadHistory();
});